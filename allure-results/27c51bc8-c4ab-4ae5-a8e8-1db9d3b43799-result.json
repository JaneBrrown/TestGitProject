{"name": "Проверяем получение данных о цвете", "status": "broken", "statusDetails": {"message": "httpx.ConnectError: [Errno 11001] getaddrinfo failed", "trace": "@contextlib.contextmanager\n    def map_httpcore_exceptions() -> typing.Iterator[None]:\n        try:\n>           yield\n\n.venv\\Lib\\site-packages\\httpx\\_transports\\default.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\Lib\\site-packages\\httpx\\_transports\\default.py:236: in handle_request\n    resp = self._pool.handle_request(req)\n.venv\\Lib\\site-packages\\httpcore\\_sync\\connection_pool.py:216: in handle_request\n    raise exc from None\n.venv\\Lib\\site-packages\\httpcore\\_sync\\connection_pool.py:196: in handle_request\n    response = connection.handle_request(\n.venv\\Lib\\site-packages\\httpcore\\_sync\\connection.py:99: in handle_request\n    raise exc\n.venv\\Lib\\site-packages\\httpcore\\_sync\\connection.py:76: in handle_request\n    stream = self._connect(request)\n.venv\\Lib\\site-packages\\httpcore\\_sync\\connection.py:122: in _connect\n    stream = self._network_backend.connect_tcp(**kwargs)\n.venv\\Lib\\site-packages\\httpcore\\_backends\\sync.py:205: in connect_tcp\n    with map_exceptions(exc_map):\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\contextlib.py:158: in __exit__\n    self.gen.throw(value)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nmap = {<class 'TimeoutError'>: <class 'httpcore.ConnectTimeout'>, <class 'OSError'>: <class 'httpcore.ConnectError'>}\n\n    @contextlib.contextmanager\n    def map_exceptions(map: ExceptionMapping) -> Iterator[None]:\n        try:\n            yield\n        except Exception as exc:  # noqa: PIE786\n            for from_exc, to_exc in map.items():\n                if isinstance(exc, from_exc):\n>                   raise to_exc(exc) from exc\nE                   httpcore.ConnectError: [Errno 11001] getaddrinfo failed\n\n.venv\\Lib\\site-packages\\httpcore\\_exceptions.py:14: ConnectError\n\nThe above exception was the direct cause of the following exception:\n\n    @allure.suite('Проверка запросов данных одного цвета')\n    @allure.title('Проверяем получение данных о цвете')\n    def test_single_colour():\n        with allure.step(f'Делаем запрос по адресу: {BASE_URL + SINGLE_COLOUR}'):\n>           response = httpx.get(BASE_URL + SINGLE_COLOUR)\n\ntests\\get_colour_data.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\Lib\\site-packages\\httpx\\_api.py:210: in get\n    return request(\n.venv\\Lib\\site-packages\\httpx\\_api.py:118: in request\n    return client.request(\n.venv\\Lib\\site-packages\\httpx\\_client.py:837: in request\n    return self.send(request, auth=auth, follow_redirects=follow_redirects)\n.venv\\Lib\\site-packages\\httpx\\_client.py:926: in send\n    response = self._send_handling_auth(\n.venv\\Lib\\site-packages\\httpx\\_client.py:954: in _send_handling_auth\n    response = self._send_handling_redirects(\n.venv\\Lib\\site-packages\\httpx\\_client.py:991: in _send_handling_redirects\n    response = self._send_single_request(request)\n.venv\\Lib\\site-packages\\httpx\\_client.py:1027: in _send_single_request\n    response = transport.handle_request(request)\n.venv\\Lib\\site-packages\\httpx\\_transports\\default.py:235: in handle_request\n    with map_httpcore_exceptions():\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\contextlib.py:158: in __exit__\n    self.gen.throw(value)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    @contextlib.contextmanager\n    def map_httpcore_exceptions() -> typing.Iterator[None]:\n        try:\n            yield\n        except Exception as exc:\n            mapped_exc = None\n    \n            for from_exc, to_exc in HTTPCORE_EXC_MAP.items():\n                if not isinstance(exc, from_exc):\n                    continue\n                # We want to map to the most specific exception we can find.\n                # Eg if `exc` is an `httpcore.ReadTimeout`, we want to map to\n                # `httpx.ReadTimeout`, not just `httpx.TimeoutException`.\n                if mapped_exc is None or issubclass(to_exc, mapped_exc):\n                    mapped_exc = to_exc\n    \n            if mapped_exc is None:  # pragma: no cover\n                raise\n    \n            message = str(exc)\n>           raise mapped_exc(message) from exc\nE           httpx.ConnectError: [Errno 11001] getaddrinfo failed\n\n.venv\\Lib\\site-packages\\httpx\\_transports\\default.py:89: ConnectError"}, "steps": [{"name": "Делаем запрос по адресу: https://reqres.in/api/unknown/2", "status": "broken", "statusDetails": {"message": "httpx.ConnectError: [Errno 11001] getaddrinfo failed\n", "trace": "  File \"C:\\Users\\NEMO\\PycharmProjects\\ApiTests1\\tests\\get_colour_data.py\", line 33, in test_single_colour\n    response = httpx.get(BASE_URL + SINGLE_COLOUR)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\NEMO\\PycharmProjects\\ApiTests1\\.venv\\Lib\\site-packages\\httpx\\_api.py\", line 210, in get\n    return request(\n           ^^^^^^^^\n  File \"C:\\Users\\NEMO\\PycharmProjects\\ApiTests1\\.venv\\Lib\\site-packages\\httpx\\_api.py\", line 118, in request\n    return client.request(\n           ^^^^^^^^^^^^^^^\n  File \"C:\\Users\\NEMO\\PycharmProjects\\ApiTests1\\.venv\\Lib\\site-packages\\httpx\\_client.py\", line 837, in request\n    return self.send(request, auth=auth, follow_redirects=follow_redirects)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\NEMO\\PycharmProjects\\ApiTests1\\.venv\\Lib\\site-packages\\httpx\\_client.py\", line 926, in send\n    response = self._send_handling_auth(\n               ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\NEMO\\PycharmProjects\\ApiTests1\\.venv\\Lib\\site-packages\\httpx\\_client.py\", line 954, in _send_handling_auth\n    response = self._send_handling_redirects(\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\NEMO\\PycharmProjects\\ApiTests1\\.venv\\Lib\\site-packages\\httpx\\_client.py\", line 991, in _send_handling_redirects\n    response = self._send_single_request(request)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\NEMO\\PycharmProjects\\ApiTests1\\.venv\\Lib\\site-packages\\httpx\\_client.py\", line 1027, in _send_single_request\n    response = transport.handle_request(request)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\NEMO\\PycharmProjects\\ApiTests1\\.venv\\Lib\\site-packages\\httpx\\_transports\\default.py\", line 235, in handle_request\n    with map_httpcore_exceptions():\n  File \"C:\\Users\\NEMO\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\contextlib.py\", line 158, in __exit__\n    self.gen.throw(value)\n  File \"C:\\Users\\NEMO\\PycharmProjects\\ApiTests1\\.venv\\Lib\\site-packages\\httpx\\_transports\\default.py\", line 89, in map_httpcore_exceptions\n    raise mapped_exc(message) from exc\n"}, "start": 1727264843624, "stop": 1727264843899}], "start": 1727264843624, "stop": 1727264843900, "uuid": "f8895c52-38b5-4057-91e3-b6e929acb532", "historyId": "245338f6146c07b3358333498dddf793", "testCaseId": "245338f6146c07b3358333498dddf793", "fullName": "tests.get_colour_data#test_single_colour", "labels": [{"name": "suite", "value": "Проверка запросов данных одного цвета"}, {"name": "parentSuite", "value": "tests"}, {"name": "host", "value": "Jane"}, {"name": "thread", "value": "21072-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.get_colour_data"}]}